using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using System.Text.Json.Serialization;

// Attribute for field mapping
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public class FieldCodeAttribute : Attribute
{
    public string Code { get; }
    public FieldCodeAttribute(string code) => Code = code;
}

// Entity class
public class MyEntity
{
    [FieldCode("Name")]
    public string Name { get; set; }

    [FieldCode("ID")]
    public string ID { get; set; }

    [FieldCode("Date")]
    public string Date { get; set; }

    [FieldCode("Match")]
    public string Nmatch { get; set; }

    [FieldCode("School")]
    public string School { get; set; }

    [FieldCode("Price")]
    public string Price { get; set; }
}

// JSON structure models
public class FieldItem
{
    [JsonPropertyName("fieldcode")]
    public string FieldCode { get; set; }

    [JsonPropertyName("fieldvalue")]
    public string FieldValue { get; set; }
}

public class JsonRecord
{
    [JsonPropertyName("source")]
    public List<FieldItem> Source { get; set; }

    [JsonPropertyName("target")]
    public List<FieldItem> Target { get; set; }
}

public static class JsonToEntityConverter
{
    public static List<T> Convert<T>(string json) where T : new()
    {
        var records = JsonSerializer.Deserialize<List<JsonRecord>>(json);

        var props = typeof(T).GetProperties()
            .Select(p => new
            {
                Property = p,
                Attribute = p.GetCustomAttribute<FieldCodeAttribute>()
            })
            .Where(x => x.Attribute != null)
            .ToList();

        var list = new List<T>();

        foreach (var record in records)
        {
            var entity = new T();
            var allFields = (record.Source ?? new List<FieldItem>())
                            .Concat(record.Target ?? new List<FieldItem>());

            foreach (var field in allFields)
            {
                var match = props.FirstOrDefault(p =>
                    string.Equals(p.Attribute.Code, field.FieldCode, StringComparison.OrdinalIgnoreCase));

                if (match != null)
                {
                    match.Property.SetValue(entity, field.FieldValue);
                }
            }

            list.Add(entity);
        }

        return list;
    }
}
