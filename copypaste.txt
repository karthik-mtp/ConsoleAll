using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

public static class AppInsightsLoggerExtensions
{
    public static void Info(
        this ILogger logger,
        string projectName,
        object? variable = null,
        [CallerArgumentExpression("variable")] string? variableName = null,
        [CallerMemberName] string method = "",
        [CallerFilePath] string file = "")
    {
        Log(logger, LogLevel.Information, projectName, variable, variableName, null, method, file);
    }

    public static void Warning(
        this ILogger logger,
        string projectName,
        object? variable = null,
        [CallerArgumentExpression("variable")] string? variableName = null,
        [CallerMemberName] string method = "",
        [CallerFilePath] string file = "")
    {
        Log(logger, LogLevel.Warning, projectName, variable, variableName, null, method, file);
    }

    public static void Error(
        this ILogger logger,
        string projectName,
        object? variable = null,
        [CallerArgumentExpression("variable")] string? variableName = null,
        Exception? ex = null,
        [CallerMemberName] string method = "",
        [CallerFilePath] string file = "")
    {
        Log(logger, LogLevel.Error, projectName, variable, variableName, ex, method, file);
    }

    private static void Log(
        ILogger logger,
        LogLevel level,
        string projectName,
        object? variable,
        string? variableName,
        Exception? ex,
        string method,
        string file)
    {
        string className = System.IO.Path.GetFileNameWithoutExtension(file);

        var logObject = new Dictionary<string, object>
        {
            { "Project", projectName },
            { "Class", className },
            { "Method", method },
            { "Level", level.ToString() }
        };

        if (variable != null && variableName != null)
        {
            logObject[variableName] = variable;
        }

        if (ex != null)
        {
            logObject["Exception"] = new
            {
                ex.Message,
                ex.StackTrace,
                ex.Source,
                Type = ex.GetType().FullName
            };
        }

        string json = JsonSerializer.Serialize(logObject, new JsonSerializerOptions { WriteIndented = true });

        switch (level)
        {
            case LogLevel.Information: logger.LogInformation(json); break;
            case LogLevel.Warning: logger.LogWarning(json); break;
            case LogLevel.Error: logger.LogError(json); break;
        }
    }
}
